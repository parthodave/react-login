{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","setState","fetch","method","headers","body","JSON","stringify","res","json","inputchange","App","UserStore","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAee,MAXf,aAAc,oBAEdA,YAAiBC,KAAK,CAClBC,SAAS,EACTC,YAAY,EACZC,SAAU,MCYCC,E,uKAlBF,IAAD,OACJ,OACI,yBAAKC,UAAU,cACX,2BACAA,UAAU,QACVC,KAAMN,KAAKO,MAAMD,KACjBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAW,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,e,GATtCI,IAAMC,WCmBhBC,E,uKAlBF,IAAD,OACP,OACO,yBAAKV,UAAU,gBAEX,4BACAA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAU,kBAAM,EAAKV,MAAMU,YAGtBjB,KAAKO,MAAMW,W,GAXLL,IAAMC,WCiElBK,E,kDA5DV,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IACDa,MAAO,CACRjB,SAAS,GACTkB,SAAS,GACTC,gBAAe,GALL,E,yKAUVtB,KAAKoB,MAAMjB,S,oDAIXH,KAAKoB,MAAMC,S,wDAIhBrB,KAAKuB,SAAS,CACVD,gBAAe,I,kBAKKE,MAAM,SACN,CACIC,OAAQ,OACRC,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB1B,SAASH,KAAKoB,MAAMjB,SACpBkB,SAAUrB,KAAKoB,MAAMC,a,cATzCS,E,iBAceA,EAAIC,O,mNASrBpB,M,+BAGL,IAAD,OACJ,OACI,yBAAKN,UAAU,aACX,kBAAC,EAAD,CAAYG,YAAY,WAAWF,KAAK,QAAQG,MAAM,GAAGC,SAAW,kBAAM,EAAKsB,iBAC/E,kBAAC,EAAD,CAAYxB,YAAY,WAAWF,KAAK,QAAQG,MAAM,GAAGC,SAAW,kBAAM,EAAKsB,sB,GAxDvEnB,IAAMC,W,gBCGxBmB,G,wDAEL,aAAc,wC,wgBAsBJ,IAAD,OAEN,OAAGC,EAAUjC,QAET,yBAAKI,UAAU,OACb,yBAAKA,UAAU,aAAf,2BAQD6B,EAAUhC,WAEP,yBAAKG,UAAU,OACZ,yBAAKA,UAAU,aAAf,WACY6B,EAAU/B,SAEjB,kBAAC,EAAD,CACAe,KAAM,UACNF,UAAW,EACXC,QAAU,kBAAM,EAAKkB,gBAcrC,yBAAK9B,UAAU,OACZ,yBAAKA,UAAU,aAEf,kBAAC,EAAD,CACaa,KAAM,UACNF,UAAW,EACXC,QAAU,kBAAM,EAAKkB,cAGlC,kBAAC,EAAD,Y,GArEYtB,IAAMC,YA6EVsB,cAASH,GCzEJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b203082a.chunk.js","sourcesContent":["import { extendObservable }  from 'mobx';\r\n\r\nclass UserStore{\r\n\r\nconstructor(){\r\n\r\nextendObservable(this,{\r\n    loading: false,\r\n    isLoggedIn: false,\r\n    username: ''\r\n        }\r\n    )\r\n}\r\n}\r\n\r\nexport default new UserStore();","import React from 'react'\r\n\r\nclass InputField extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"inputField\">\r\n                <input\r\n                className='input'\r\n                type={this.props.type}\r\n                placeholder={this.props.placeholder}\r\n                value={this.props.value}\r\n                onChange={ (e) => this.props.onChange(e.target.value) }\r\n\r\n                \r\n                >\r\n                </input>\r\n            </div>\r\n        );      \r\n    }\r\n}\r\n\r\nexport default InputField","import React from 'react'\r\n\r\nclass SubmitButton extends React.Component{\r\n    render(){\r\n     return(\r\n            <div className=\"submitButton\" >\r\n\r\n                <button\r\n                className='btn'\r\n                disabled={this.props.disabled}\r\n                onClick={ () => this.props.onClick() }                \r\n                >\r\n\r\n                    {this.props.text}\r\n                </button>\r\n\r\n            </div>\r\n     );\r\n    }\r\n}\r\n\r\nexport default SubmitButton","import React from 'react'\r\nimport InputField from './InputField'\r\nimport SubmitButton from './SubmitButton'\r\nimport UserStore from  './stores/UserStore'\r\n\r\nclass LoginForm extends React.Component{\r\n\r\n     constructor(props){\r\n         super(props)\r\n         this.state ={\r\n             username:'',\r\n             password:'',\r\n             buttonDisabled:false\r\n         }\r\n     }\r\n\r\n     async doLogin(){\r\n         if(!this.state.username){\r\n             return;\r\n         }\r\n\r\n         if(!this.state.password){\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled:true\r\n        })\r\n\r\n        try {\r\n            \r\n                let res = await fetch('/login',\r\n                                {\r\n                                    method: 'post',\r\n                                    headers:{\r\n                                        'Accept': 'application/json',\r\n                                        'Content-Type': 'application/json'\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        username:this.state.username,\r\n                                        password: this.state.password\r\n                                    })\r\n                                }\r\n                );\r\n\r\n                let result = await res.json();\r\n                //if(result && re)\r\n\r\n        } catch (error) {\r\n            \r\n        }\r\n\r\n     }\r\n\r\n     inputchange (e){\r\n\r\n     }\r\n    render(){\r\n        return (\r\n            <div className=\"loginForm\">                \r\n                <InputField placeholder='username' type='input' value='' onChange={ () => this.inputchange()}></InputField>\r\n                <InputField placeholder='password' type='input' value='' onChange={ () => this.inputchange() }></InputField>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\nimport UserStore from './stores/UserStore';\nimport  LoginForm from \"./LoginForm\";\nimport  SubmitButton  from './SubmitButton';\nimport jsonData from \"./stores/LoginData.json\";\nimport { observer } from 'mobx-react'\nimport './App.css';\n\nclass App  extends React.Component  {\n  \n constructor(){\n  super() \n }\n\n async componentDidMount(){\n  \n  // if(UserStore.loading){\n  //     UserStore.loading=false\n  //     UserStore.isLoggedIn=true\n  // }\n  //   else{\n  //     UserStore.loading=true\n  //     UserStore.isLoggedIn=false\n  // } \n\n \n}\n\nasync doLogout(){\n\n}\n\n  render(){\n    \n    if(UserStore.loading){\n      return (  \n        <div className=\"App\">\n          <div className=\"container\">\n            Loading Please wait...\n          </div>\n        </div>\n      );\n    }\n    else{\n\n      if(UserStore.isLoggedIn){\n        return (\n            <div className=\"app\">\n               <div className=\"Container\">\n                  Welcome {UserStore.username}\n\n                    <SubmitButton \n                    text={'Log Out'}  \n                    disabled ={false}\n                    onClick={ () => this.doLogout() }\n                                        \n                    />\n\n                    \n               </div>\n            </div>\n        );\n      }\n\n    }\n    \n\n  return (  \n    <div className=\"App\">\n       <div className=\"container\" > \n        \n       <SubmitButton \n                    text={'Log Out'}  \n                    disabled ={false}\n                    onClick={ () => this.doLogout() }\n                                        \n                    />\n       <LoginForm/>\n        </div>\n    </div>\n  );\n\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}